<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.IO" #>
<#@ assembly name="System.Reflection" #>
<#@ assembly name="$(ProjectDir)bin\Debug\Symphony.DtoGenerator.Core.dll" #>
<#@ assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.CSharp" #>
<#@ import namespace="System.CodeDom" #>
<#@ import namespace="Symphony.DtoGenerator.Core.Services" #>
<#@ import namespace="Symphony.DtoGenerator.Core.Models" #>
<#@ import namespace="Symphony.DtoGenerator.Core.Helpers.Utilities" #>
<#@ output extension=".txt" #>
<#@ include file="T4Toolbox.tt" #>
<#
    // Init - invoke generation service
    var configPath = Path.Combine(Host.ResolvePath("."), "Symphony.DtoGen.Config.json");
    var generationInvokerService = new GenerationInvokerService(new ConfigurationService(configPath), new AssemblyLoaderService(), new DtoGenerationService(new ResultDtoService()));
    var genResult = generationInvokerService.Invoke();
    var dtoOutputFolderName = "DtoOutput";

    try
    {
        PrintDtos(genResult, dtoOutputFolderName);
        WriteLine("Successfully created DTO files within folder '{0}'", dtoOutputFolderName);
    }
    catch(Exception ex)
    {
        WriteLine("The following exception has occurred:\r\n\r\n");
        WriteLine("Message: {0}\r\n\r\nSource: {1}\r\n\r\nStackTrace: {2}", ex.Message, ex.Source, ex.StackTrace);
    }
#>
<#+
    private Dictionary<string, string> _dtoClassNameChanges = null;

    public class DtoFileTemplate : Template
    {
        private string _content; 

        public DtoFileTemplate(string content)
        {
            _content = content;
        }

        public override string TransformText()
        {
            WriteLine(_content);
            return GenerationEnvironment.ToString();
        }
    }

    private string GetActiveProjectFullName()
    {
        var serviceProvider = Host as IServiceProvider;
        var dte = serviceProvider.GetService(typeof(EnvDTE.DTE)) as EnvDTE.DTE;
        Array activeSolutionProjects = dte.ActiveSolutionProjects as Array;
        if(activeSolutionProjects != null && activeSolutionProjects.Length > 0)
            return (activeSolutionProjects.GetValue(0) as Project).FullName;

        throw new ArgumentNullException("Active project was not found.");
    }

    private void PrintDtos(GenResult genResult, string dtoOutputFolderName)
    {
        var dtoClassNameChanges = GetDtoClassNameChanges(genResult);

        foreach(var dto in genResult.GenResultDtos)
        {
            var dependentNamespaces = new List<string>();
            var dtoClassNameNew = (string.IsNullOrWhiteSpace(genResult.DtoPrefix) ? "" : genResult.DtoPrefix) + dto.BaseType.Name + (string.IsNullOrWhiteSpace(genResult.DtoSuffix) ? "" : genResult.DtoSuffix);
            var dtoNamespace = (string.IsNullOrWhiteSpace(genResult.NamespacePrefix) ? "" : genResult.NamespacePrefix + ".") + dto.Namespace + (string.IsNullOrWhiteSpace(genResult.NamespaceSuffix) ? "" : "." + genResult.NamespaceSuffix);
            var sb = new StringBuilder();
            sb.AppendFormat("namespace {0}\r\n", dtoNamespace);
            sb.AppendLine("{");
            sb.AppendLine(CreateDtoContent(dto, dtoClassNameNew, dependentNamespaces, dtoClassNameChanges));
            sb.AppendLine("}");

            string usingStatements = string.Empty;
             // Add using statements
            foreach(var dn in dependentNamespaces)
            {
                usingStatements += string.Format("using {0};\r\n", dn);
            }
      
            var newFileName = string.Format(@"{0}\{1}.cs", dtoOutputFolderName, dtoClassNameNew);
            using (DtoFileTemplate template = new DtoFileTemplate(GetFileComments() + usingStatements + sb.ToString()))
            {
                template.Output.File = newFileName; 
                template.Output.Project = GetActiveProjectFullName(); 
                template.Render();
            }
        }
    }
    
    private Dictionary<string, string> GetDtoClassNameChanges(GenResult genResult)
    {
        if(_dtoClassNameChanges == null)
        {
            _dtoClassNameChanges = new Dictionary<string, string>();
            foreach(var dto in genResult.GenResultDtos)
            {
                var newName = (string.IsNullOrWhiteSpace(genResult.DtoPrefix) ? "" : genResult.DtoPrefix) + dto.BaseType.Name + (string.IsNullOrWhiteSpace(genResult.DtoSuffix) ? "" : genResult.DtoSuffix);
                if(_dtoClassNameChanges.ContainsKey(dto.BaseType.Name))
                    _dtoClassNameChanges.Add(dto.BaseType.Name, newName);
            }
        }
        return _dtoClassNameChanges;
    }

    private string GetFileComments()
    {
        var sb = new StringBuilder();
        sb.AppendLine("/*");
        sb.AppendLine("This is an autogenerated class any manual edits to this file will be lost the next time this class is generated");
        sb.AppendFormat("This file was last generated on {0}\r\n", DateTime.Now.ToString());
        sb.AppendLine("*/\r\n");
        return sb.ToString();
    }

    private string CreateDtoContent(GenResultDto dto, string dtoClassName, List<string> dependentNamespaces, Dictionary<string, string> dtoClassNameChanges)
    {      
        if(dto == null) return string.Empty;
        
        var sb = new StringBuilder();
        sb.Append("\t");
        sb.AppendFormat("public partial class {0}\r\n", dtoClassName);
        sb.Append("\t{\r\n");
        foreach(var p in dto.Primitives)
        {
            string type = IsSimple(p.PropertyType) ? GetCompilerType(p.PropertyType) : GetComplexType(p.PropertyType, dtoClassNameChanges);

            if(!dependentNamespaces.Contains(p.PropertyType.Namespace))
                dependentNamespaces.Add(p.PropertyType.Namespace);

            type = type.StartsWith(p.PropertyType.Namespace) ? type.Replace(p.PropertyType.Namespace + ".", "") : type;

            sb.Append("\t\t");
            sb.AppendFormat("public {0} {1} {{ get; set; }}\r\n", type, p.Name);   
        }
        sb.Append("\t}");

        return sb.ToString();
    }

    private bool IsSimple(Type t)
    {
        if (t.IsGenericType && t.GetGenericTypeDefinition() == typeof(Nullable))
        {
            // nullable type, check if the nested type is simple.
            return IsSimple((t.GetGenericArguments()[0]).GetTypeInfo());
        }
        return t.IsPrimitive 
            || t.IsEnum
            || t.Equals(typeof(string))
            || t.Equals(typeof(decimal))
            || t.Equals(typeof(DateTime));
    }

    private string GetCompilerType(Type t)
    { 
        using(var compiler = new CSharpCodeProvider())
        {
            var type = new CodeTypeReference(t);
            return compiler.GetTypeOutput(type);
        }
    }

    private string GetComplexType(Type t, Dictionary<string, string> dtoClassNameChanges)
    {
         //TODO: Need to see if there is a better way to extract proper string format of generic types
        if(t.IsGenericType)
        {
            var typeArgs = string.Empty;
            Type[] typeArguments = t.GetGenericArguments();
            foreach(Type tArg in typeArguments)
            {
                var tArgString = IsSimple(tArg) ? GetCompilerType(tArg) : GetComplexType(tArg, dtoClassNameChanges);
                typeArgs += ", " + tArgString;
            }
            return CleanComplexTypeName(t.Name) + "<" + typeArgs.Substring(2) + ">";
        }      
        
        return CleanComplexTypeName(t.Name);; //(string.IsNullOrWhiteSpace(dtoClassPrefix) ? "" : dtoClassPrefix) + t.Name + (string.IsNullOrWhiteSpace(dtoClassSuffix) ? "" : dtoClassSuffix);
    }

    private string CleanComplexTypeName(string name)
    {
        return name.Contains("`") ? name.Substring(0, name.IndexOf("`")) : name;
    }

 #>

